1.异常捕获机制中的try-catch
应当有一个好习惯，在最后一个catch中捕获Exception.并且多个catch捕获异常时，子类异常在上先捕获，而父类异常在下后捕获。
（try中出现错误catch捕获catch中处理）
2.throw
通常两种情况下会主动抛出异常:
（1）:遇到满足语法要求，但是不满足业务逻辑要求时，可以当作异常对待抛出，通知调用者这是非法操作。
（2）:当遇到了一个异常，但是当前代码不应当解决该异常时，可以将其抛出交给调用者解决。
当调用一个含有throws声明异常抛出的方法时，编译器要求必须有处理该异常的手段，有两种:
(1):使用try-catch捕获
(2):在当前方法上继续使用throws声明这个异常的抛出具体用哪个取决于异常应该归谁处理。
3.finally块
finally块只能定义在异常捕获机制的最后finally块可以保证其中的代码一定被执行，无论try块中的代码是否抛出异常，甚至return。
(通常会将诸如释放资源等一类的代码定义在finally中比如:使用流后的close工作可以放在finally中确保一定可以关闭流。)
例如在使用PrintWriter时在finally中关闭流（pw.close（））
4.Exception中的常用方法
	e.printStackTrace();//输出错误堆栈信息
	System.out.println(e.getMessage());//获取异常消息
